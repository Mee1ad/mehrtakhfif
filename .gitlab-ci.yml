# This file is a template, and might need editing before it works on your project.
# This example is for testing Django with MySQL.
#
# The test CI/CD variables MYSQL_DB, MYSQL_USER and MYSQL_PASS can be set in the project settings at:
#     Settings --> CI/CD --> Variables
#
# The Django settings in settings.py, used in tests, might look similar to:
#
#  DATABASES = {
#      'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': os.environ.get('MYSQL_DATABASE'),
#        	'USER':  os.environ.get('MYSQL_USER'),
#        	'PASSWORD': os.environ.get('MYSQL_PASSWORD'),
#       	'HOST': 'mysql',
#     	  'PORT': '3306',
#         'CONN_MAX_AGE':60,
#      },
#  }
#
# It is possible to use '--settings' to specify a custom settings file on the command line below or use an environment
# variable to trigger an include on the bottom of your settings.py:
#   if os.environ.get('DJANGO_CONFIG')=='test':
#       from .settings_test import *
#
# It is also possible to hardcode the database name and credentials in the settings.py file and in the .gitlab-ci.yml file.
#
# The mysql service needs some variables too. See https://hub.docker.com/_/mysql for possible mysql env variables
# Note that when using a service in GitLab CI/CD that needs environment variables to run, only variables defined in
# .gitlab-ci.yml are passed to the service and variables defined in the GitLab UI are not.
# https://gitlab.com/gitlab-org/gitlab/-/issues/30178

variables:
  # DJANGO_CONFIG: "test"
  POSTGRES_DB: "mehrtakhfif_test"
  POSTGRES_PASSWORD: "tgguyvfbjMKKKJHTDFGHJbhb156411dDD1DFJNMKKhnjkmkkmvbCBNBKJKGJK7878976"
  POSTGRES_USER: "django"

default:
  #
  # Pick zero or more services to be used on all builds.
  # Only needed when using a docker container to run your tests in.
  # Check out: http://docs.gitlab.com/ee/ci/docker/using_docker_images.html#what-is-a-service
  services:
    - postgres:12.9
  #
  # This folder is cached between builds
  # http://docs.gitlab.com/ee/ci/yaml/README.html#cache
  cache:
    paths:
      - ~/.cache/pip/
  before_script:
    - cd /home/ubuntu/server
    - /home/ubuntu/.local/share/virtualenvs/server-kzNZvDYs/bin/pip3 install -r req.txt


migrations:
  stage: build
  tags:
        - server
  script:
    - /home/ubuntu/.local/share/virtualenvs/server-kzNZvDYs/bin/python3 manage.py makemigrations manage.py makemigrations
    - /home/ubuntu/.local/share/virtualenvs/server-kzNZvDYs/bin/python3 manage.py makemigrations manage.py migrate
    - /home/ubuntu/.local/share/virtualenvs/server-kzNZvDYs/bin/python3 manage.py makemigrations manage.py check


django-tests:
  stage: test
  tags:
        - server
  script:
    # use python3 explicitly. see https://wiki.ubuntu.com/Python/3
    - /home/ubuntu/.local/share/virtualenvs/server-kzNZvDYs/bin/python3 manage.py test --keepdb --pattern="*test.py" server mtadmin
