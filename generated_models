# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey has `on_delete` set to the desired behavior.
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class Address(models.Model):
    id = models.BigIntegerField(primary_key=True)
    province = models.CharField(max_length=-1)
    city = models.CharField(max_length=-1)
    postal_code = models.CharField(max_length=-1, blank=True, null=True)
    address_text = models.TextField()
    location = models.CharField(max_length=-1, blank=True, null=True)
    user_id = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Address'


class Basket(models.Model):
    id = models.BigIntegerField(primary_key=True)
    created_at = models.DateField()
    created_by = models.BigIntegerField()
    updated_at = models.DateField()
    updated_by = models.BigIntegerField()
    deleted_at = models.DateField(blank=True, null=True)
    deleted_by = models.BigIntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Basket'


class BasketProduct(models.Model):
    product_id = models.BigIntegerField()
    basket_id = models.BigIntegerField()
    count = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'Basket_Product'


class Box(models.Model):
    id = models.SmallIntegerField(primary_key=True)
    name = models.CharField(max_length=255)
    created_at = models.DateField()
    created_by = models.ForeignKey('User', models.DO_NOTHING, db_column='created_by')
    updated_at = models.DateField()
    updated_by = models.ForeignKey('User', models.DO_NOTHING, db_column='updated_by')

    class Meta:
        managed = False
        db_table = 'Box'


class Category(models.Model):
    id = models.BigIntegerField(primary_key=True)
    parent_id = models.BigIntegerField()
    box_id = models.SmallIntegerField()
    name = models.CharField(max_length=255)
    created_at = models.DateField()
    created_by = models.BigIntegerField()
    updated_at = models.DateField()
    updated_by = models.BigIntegerField()
    deactive = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'Category'


class Comments(models.Model):
    id = models.BigIntegerField(primary_key=True)
    created_at = models.DateField()
    created_by = models.BigIntegerField()
    updated_at = models.DateField()
    updated_by = models.BigIntegerField()
    deleted_at = models.DateField(blank=True, null=True)
    deleted_by = models.BigIntegerField(blank=True, null=True)
    text = models.TextField()
    approved = models.BooleanField()
    user_id = models.BigIntegerField()
    reply_id = models.BigIntegerField(blank=True, null=True)
    suspend = models.BooleanField()
    type = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'Comments'


class Factor(models.Model):
    id = models.BigIntegerField(primary_key=True)
    created_at = models.DateField()
    created_by = models.BigIntegerField()
    suspended_at = models.DateField(blank=True, null=True)
    suspended_by = models.BigIntegerField(blank=True, null=True)
    user_id = models.BigIntegerField()
    price = models.BigIntegerField()
    payed_at = models.DateField(blank=True, null=True)
    successful = models.BooleanField()
    type = models.CharField(max_length=255, blank=True, null=True)
    special_offer_id = models.BigIntegerField(blank=True, null=True)
    address = models.TextField(blank=True, null=True)  # This field type is a guess.
    description = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Factor'


class FactorProduct(models.Model):
    id = models.BigIntegerField(primary_key=True)
    last_updated_by = models.BigIntegerField()
    factor_id = models.BigIntegerField()
    product_id = models.BigIntegerField()
    final_price = models.BigIntegerField()
    discount_price = models.BigIntegerField()
    count = models.SmallIntegerField()
    taks = models.IntegerField()
    description = models.CharField(max_length=255, blank=True, null=True)
    start_price = models.BigIntegerField()

    class Meta:
        managed = False
        db_table = 'Factor_Product'


class Feature(models.Model):
    id = models.BigIntegerField(primary_key=True)
    created_at = models.DateField()
    created_by = models.BigIntegerField()
    updated_at = models.DateField()
    updated_by = models.BigIntegerField()
    name = models.CharField(max_length=-1)
    value = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Feature'


class Media(models.Model):
    id = models.BigIntegerField(primary_key=True)
    type = models.CharField(max_length=-1, blank=True, null=True)
    box_id = models.IntegerField(blank=True, null=True)
    link = models.TextField()
    file_format = models.CharField(max_length=-1)
    name = models.CharField(max_length=-1)
    created_at = models.DateField()
    created_by = models.BigIntegerField()
    deleted_at = models.DateField(blank=True, null=True)
    deleted_by = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Media'


class Menu(models.Model):
    id = models.BigIntegerField(primary_key=True)
    created_at = models.DateField()
    created_by = models.BigIntegerField()
    updated_at = models.DateField()
    updated_by = models.BigIntegerField()
    deleted_at = models.DateField(blank=True, null=True)
    deleted_by = models.BigIntegerField(blank=True, null=True)
    type = models.CharField(max_length=255, blank=True, null=True)
    value = models.TextField(blank=True, null=True)  # This field type is a guess.

    class Meta:
        managed = False
        db_table = 'Menu'


class Product(models.Model):
    id = models.BigIntegerField(primary_key=True)
    created_at = models.DateField()
    created_by = models.BigIntegerField()
    updated_at = models.DateField()
    updated_by = models.BigIntegerField()
    category_id = models.BigIntegerField()
    name = models.CharField(max_length=-1)
    perma_link = models.TextField(blank=True, null=True)
    short_description = models.TextField(blank=True, null=True)
    discription = models.TextField(blank=True, null=True)
    final_price = models.IntegerField(blank=True, null=True)
    product_available_count = models.IntegerField(blank=True, null=True)
    start_price = models.BigIntegerField(blank=True, null=True)
    discount_price = models.BigIntegerField(blank=True, null=True)
    location = models.CharField(max_length=-1)
    usage_condition = models.TextField()
    sold_count = models.BigIntegerField()
    income = models.BigIntegerField()
    profit = models.BigIntegerField()
    deactive = models.BooleanField()
    available_count = models.IntegerField()
    discount_vip_price = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Product'


class ProductMedia(models.Model):
    product_id = models.BigIntegerField()
    media_id = models.BigIntegerField(primary_key=True)

    class Meta:
        managed = False
        db_table = 'Product_Media'
        unique_together = (('media_id', 'product_id'),)


class ProductTag(models.Model):
    id = models.BigIntegerField(blank=True, null=True)
    product_id = models.BigIntegerField(blank=True, null=True)
    tag_id = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Product_Tag'


class Rate(models.Model):
    id = models.BigIntegerField(primary_key=True)
    created_at = models.DateField()
    user_id = models.BigIntegerField()
    rate = models.FloatField()
    product_id = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Rate'


class Sample(models.Model):
    id = models.BigIntegerField(primary_key=True)
    created_at = models.DateField()
    created_by = models.BigIntegerField()
    updated_at = models.DateField()
    updated_by = models.BigIntegerField()
    deleted_at = models.DateField(blank=True, null=True)
    deleted_by = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Sample'


class Slider(models.Model):
    id = models.BigIntegerField(primary_key=True)
    title = models.TextField(blank=True, null=True)
    link = models.TextField(blank=True, null=True)
    product_id = models.BigIntegerField(blank=True, null=True)
    media_id = models.BigIntegerField()
    type = models.CharField(max_length=255)
    created_at = models.DateField()
    created_by = models.BigIntegerField()
    updated_at = models.DateField()
    updated_by = models.BigIntegerField()
    deleted_at = models.DateField()
    deleted_by = models.BigIntegerField()

    class Meta:
        managed = False
        db_table = 'Slider'


class Specialoffer(models.Model):
    id = models.BigIntegerField(primary_key=True)
    box_id = models.BigIntegerField()
    discount_price = models.SmallIntegerField()
    vip_discount_price = models.SmallIntegerField(blank=True, null=True)
    start_date = models.DateField()
    end_date = models.DateField()
    created_at = models.BigIntegerField()
    created_by = models.BigIntegerField()
    updated_at = models.BigIntegerField()
    updated_by = models.BigIntegerField()
    deleted_at = models.BigIntegerField(blank=True, null=True)
    deleted_by = models.BigIntegerField(blank=True, null=True)
    peak_price = models.BigIntegerField()

    class Meta:
        managed = False
        db_table = 'SpecialOffer'


class Specialproducts(models.Model):
    id = models.BigIntegerField(primary_key=True)
    title = models.TextField(blank=True, null=True)
    link = models.TextField(blank=True, null=True)
    product_id = models.BigIntegerField(blank=True, null=True)
    media_id = models.BigIntegerField()
    type = models.CharField(max_length=-1)
    created_at = models.DateField()
    created_by = models.BigIntegerField()
    updated_at = models.DateField()
    updated_by = models.BigIntegerField()
    deleted_at = models.DateField()
    deleted_by = models.BigIntegerField()
    description = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'SpecialProducts'


class Tag(models.Model):
    id = models.BigIntegerField(blank=True, null=True)
    name = models.CharField(max_length=255, blank=True, null=True)
    box_id = models.BigIntegerField(blank=True, null=True)
    created_at = models.DateField(blank=True, null=True)
    created_by = models.BigIntegerField(blank=True, null=True)
    updated_at = models.DateField(blank=True, null=True)
    updated_by = models.BigIntegerField(blank=True, null=True)
    deleted_at = models.DateField(blank=True, null=True)
    deleted_by = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Tag'


class User(models.Model):
    id = models.BigIntegerField(primary_key=True)
    first_name = models.CharField(max_length=255)
    last_name = models.CharField(max_length=255)
    email = models.CharField(max_length=255, blank=True, null=True)
    password = models.TextField(blank=True, null=True)
    sex = models.BooleanField(blank=True, null=True)
    phone_number_field = models.CharField(db_column='phone_number ', max_length=255)  # Field renamed to remove unsuitable characters. Field renamed because it ended with '_'.
    created_at = models.DateField()
    updated_at = models.DateField(blank=True, null=True)
    banned = models.BooleanField()
    phone_verified = models.CharField(max_length=-1)
    email_verified = models.CharField(max_length=-1)
    avatar_id = models.BigIntegerField(blank=True, null=True)
    meli_code = models.CharField(max_length=15, blank=True, null=True)
    wallet_money = models.IntegerField(blank=True, null=True)
    suspend_expire_date = models.DateField(blank=True, null=True)
    vip = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'User'


class Walletdetail(models.Model):
    id = models.BigIntegerField(primary_key=True)
    created_at = models.DateField()
    created_by = models.BigIntegerField()
    updated_at = models.DateField()
    updated_by = models.BigIntegerField()
    user_id = models.BigIntegerField()

    class Meta:
        managed = False
        db_table = 'WalletDetail'


class Weblog(models.Model):
    id = models.BigIntegerField(primary_key=True)
    created_at = models.DateField()
    created_by = models.BigIntegerField()
    updated_at = models.DateField()
    updated_by = models.BigIntegerField()
    deleted_at = models.DateField(blank=True, null=True)
    deleted_by = models.BigIntegerField(blank=True, null=True)
    box_id = models.BigIntegerField(blank=True, null=True)
    title = models.CharField(max_length=255, blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    media_id = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Weblog'


class Weblogpost(models.Model):
    id = models.BigIntegerField(primary_key=True)
    created_at = models.DateField()
    created_by = models.BigIntegerField()
    updated_at = models.DateField()
    updated_by = models.BigIntegerField()
    deleted_at = models.DateField(blank=True, null=True)
    deleted_by = models.BigIntegerField(blank=True, null=True)
    weblog_id = models.BigIntegerField(blank=True, null=True)
    body = models.TextField(blank=True, null=True)
    perma_link = models.CharField(max_length=255, blank=True, null=True)
    media_id = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'WeblogPost'


class Whislist(models.Model):
    id = models.BigIntegerField(primary_key=True)
    created_at = models.DateField()
    created_by = models.BigIntegerField()
    updated_at = models.DateField()
    updated_by = models.BigIntegerField()
    deleted_at = models.DateField(blank=True, null=True)
    deleted_by = models.BigIntegerField(blank=True, null=True)
    user_id = models.BigIntegerField()
    type = models.CharField(max_length=255)
    notify = models.BooleanField()
    product_id = models.BigIntegerField()

    class Meta:
        managed = False
        db_table = 'WhisList'
